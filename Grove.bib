
@inproceedings{omar_hazelnut_2017,
	title = {Hazelnut: {A} {Bidirectionally} {Typed} {Structure} {Editor} {Calculus}},
	booktitle = {44th {ACM} {SIGPLAN} {Symposium} on {Principles} of {Programming} {Languages} ({POPL} 2017)},
	author = {Omar, Cyrus and Voysey, Ian and Hilton, Michael and Aldrich, Jonathan and Hammer, Matthew A.},
	year = {2017},
	file = {arXiv Fulltext PDF:C\:\\Users\\dedbo\\Zotero\\storage\\7S5CSX6L\\Omar et al. - 2017 - Hazelnut A Bidirectionally Typed Structure Editor.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\dedbo\\Zotero\\storage\\BPVLS789\\1607.html:text/html},
}

@book{chacon_pro_2014,
	title = {Pro git},
	publisher = {Springer Nature},
	author = {Chacon, Scott and Straub, Ben},
	year = {2014},
}

@misc{noauthor_use_nodate,
	title = {Use {Microsoft} {Live} {Share} to collaborate with {Visual} {Studio} {Code}},
	url = {https://code.visualstudio.com/learn/collaboration/live-share},
	abstract = {Use Microsoft Live Share to collaborate with Visual Studio Code},
	language = {en},
	urldate = {2021-06-29},
	file = {Snapshot:C\:\\Users\\dedbo\\Zotero\\storage\\APDNVGY9\\live-share.html:text/html},
}

@article{resnick_scratch_2009,
	title = {Scratch: programming for all},
	volume = {52},
	url = {https://doi.org/10.1145/1592761.1592779},
	doi = {10.1145/1592761.1592779},
	number = {11},
	journal = {Commun. ACM},
	author = {Resnick, Mitchel and Maloney, John H. and Monroy-Hernández, Andrés and Rusk, Natalie and Eastmond, Evelyn and Brennan, Karen and Millner, Amon and Rosenbaum, Eric and Silver, Jay S. and Silverman, Brian and Kafai, Yasmin B.},
	year = {2009},
	pages = {60--67},
}

@inproceedings{voelter_language_2011,
	title = {Language and {IDE} {Modularization} and {Composition} with {MPS}},
	booktitle = {International {Summer} {School} on {Generative} and {Transformational} {Techniques} in {Software} {Engineering}},
	publisher = {Springer},
	author = {Voelter, Markus},
	year = {2011},
	pages = {383--430},
}

@misc{noauthor_webflow_nodate,
	title = {Webflow: {The} no-code platform for web design and development},
	shorttitle = {Webflow},
	url = {https://webflow.com/},
	abstract = {Webflow empowers web designers to build professional, responsive, and custom websites in a completely visual canvas with no code. Try Webflow for free!},
	language = {en},
	urldate = {2021-06-29},
	file = {Snapshot:C\:\\Users\\dedbo\\Zotero\\storage\\QSRWVQDF\\webflow.com.html:text/html},
}

@article{kruskal_efficient_1990,
	title = {Efficient parallel algorithms for graph problems},
	volume = {5},
	issn = {1432-0541},
	url = {https://doi.org/10.1007/BF01840376},
	doi = {10.1007/BF01840376},
	abstract = {We present an efficient technique for parallel manipulation of data structures that avoids memory access conflicts. That is, this technique works on the Exclusive Read/Exclusive Write (EREW) model of computation, which is the weakest shared memory, MIMD machine model. It is used in a new parallel radix sort algorithm that is optimal for keys whose values are over a small range. Using the radix sort and known results for parallel prefix on linked lists, we develop parallel algorithms that efficiently solve various computations on trees and “unicycular graphs.” Finally, we develop parallel algorithms for connected components, spanning trees, minimum spanning trees, and other graph problems. All of the graph algorithms achieve linear speedup for all but the sparsest graphs.},
	language = {en},
	number = {1},
	urldate = {2021-07-02},
	journal = {Algorithmica},
	author = {Kruskal, Clyde P. and Rudolph, Larry and Snir, Marc},
	month = jun,
	year = {1990},
	pages = {43--64},
	file = {Springer Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\CXKK3VW2\\Kruskal et al. - 1990 - Efficient parallel algorithms for graph problems.pdf:application/pdf},
}

@inproceedings{shapiro_conflict-free_2011,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Conflict-{Free} {Replicated} {Data} {Types}},
	isbn = {978-3-642-24550-3},
	doi = {10.1007/978-3-642-24550-3_29},
	abstract = {Replicating data under Eventual Consistency (EC) allows any replica to accept updates without remote synchronisation. This ensures performance and scalability in large-scale distributed systems (e.g., clouds). However, published EC approaches are ad-hoc and error-prone. Under a formal Strong Eventual Consistency (SEC) model, we study sufficient conditions for convergence. A data type that satisfies these conditions is called a Conflict-free Replicated Data Type (CRDT). Replicas of any CRDT are guaranteed to converge in a self-stabilising manner, despite any number of failures. This paper formalises two popular approaches (state- and operation-based) and their relevant sufficient conditions. We study a number of useful CRDTs, such as sets with clean semantics, supporting both add and remove operations, and consider in depth the more complex Graph data type. CRDT types can be composed to develop large-scale distributed applications, and have interesting theoretical properties.},
	language = {en},
	booktitle = {Stabilization, {Safety}, and {Security} of {Distributed} {Systems}},
	publisher = {Springer},
	author = {Shapiro, Marc and Preguiça, Nuno and Baquero, Carlos and Zawirski, Marek},
	editor = {Défago, Xavier and Petit, Franck and Villain, Vincent},
	year = {2011},
	keywords = {Eventual Consistency, Large-Scale Distributed Systems, Replicated Shared Objects},
	pages = {386--400},
	file = {Springer Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\735WZURY\\Shapiro et al. - 2011 - Conflict-Free Replicated Data Types.pdf:application/pdf},
}

@article{ruparelia_history_2010,
	title = {The history of version control},
	volume = {35},
	issn = {0163-5948},
	url = {https://dl.acm.org/doi/10.1145/1668862.1668876},
	doi = {10.1145/1668862.1668876},
	language = {en},
	number = {1},
	urldate = {2021-07-03},
	journal = {ACM SIGSOFT Software Engineering Notes},
	author = {Ruparelia, Nayan B.},
	month = jan,
	year = {2010},
	pages = {5--9},
	file = {Ruparelia - 2010 - The history of version control.pdf:C\:\\Users\\dedbo\\Zotero\\storage\\S5LHBX5A\\Ruparelia - 2010 - The history of version control.pdf:application/pdf},
}

@article{burckhardt_towards_2015,
	title = {Towards {AST}-based {Collaborative} {Editing}},
	url = {https://www.microsoft.com/en-us/research/publication/towards-ast-based-collaborative-editing/},
	abstract = {Handheld devices and cloud-connected applications are now commonplace. Even complex software development tasks are moving into the mobile arena, as exemplified by “on-thego” code-editing with applications like Visual Studio Online. Further still, there is a trend towards real-time components in collaborative software development, with platforms like Google Docs and MS Office Online enabling limited forms […]},
	language = {en-US},
	urldate = {2021-07-05},
	author = {Burckhardt, Sebastian and Moskal, Michal},
	month = feb,
	year = {2015},
	file = {Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\4JC6EH6X\\Burckhardt and Moskal - 2015 - Towards AST-based Collaborative Editing.pdf:application/pdf;Snapshot:C\:\\Users\\dedbo\\Zotero\\storage\\9GVSRQRY\\towards-ast-based-collaborative-editing.html:text/html},
}

@article{sun_real_2020,
	title = {Real {Differences} between {OT} and {CRDT} in {Correctness} and {Complexity} for {Consistency} {Maintenance} in {Co}-{Editors}},
	volume = {4},
	url = {https://doi.org/10.1145/3392825},
	doi = {10.1145/3392825},
	abstract = {OT (Operational Transformation) was invented for supporting real-time co-editors in the late 1980s and has evolved to become core techniques widely used in today's working co-editors and adopted in industrial products. CRDT (Commutative Replicated Data Type) for co-editors was first proposed around 2006, under the name of WOOT (WithOut Operational Transformation). Follow-up CRDT variations are commonly labeled as "post-OT" techniques capable of making concurrent operations natively commutative in co-editors. On top of that, CRDT solutions have made broad claims of superiority over OT solutions, and often portrayed OT as an incorrect and inefficient technique. Over one decade later, however, CRDT is rarely found in working co-editors; OT remains the choice for building the vast majority of today's co-editors. Contradictions between the reality and CRDT's purported advantages have been the source of much confusion and debate in co-editing researcher and developer communities. To seek truth from facts, we set out to conduct a comprehensive and critical review on representative OT and CRDT solutions and working co-editors based on them. From this work, we have made important discoveries about OT and CRDT, and revealed facts and evidences that refute CRDT claims over OT on all accounts. These discoveries help explain the underlying reasons for the choice between OT and CRDT in the real world. We report these results in a series of three articles. In this article (the second in the series), we reveal the differences between OT and CRDT in their basic approaches to realizing the same general transformation and how such differences had resulted in different technical challenges and consequential correctness and complexity issues. Moreover, we reveal hidden complexity and algorithmic flaws with representative CRDT solutions, and discuss common myths and facts related to correctness and complexity of OT and CRDT. We hope the discoveries from this work help clear up common myths and confusions surrounding OT and CRDT, and accelerate progress in co-editing technology for real world applications.},
	number = {CSCW1},
	urldate = {2021-07-05},
	journal = {Proceedings of the ACM on Human-Computer Interaction},
	author = {Sun, David and Sun, Chengzheng and Ng, Agustina and Cai, Weiwei},
	month = may,
	year = {2020},
	keywords = {commutative replicated data type (CRDT), computer supported cooperative work (CSCW) and social computing, concurrency control, consistency maintenance, distributed/internet/cloud computing, operational transformation (OT), real-time co-editing},
	pages = {021:1--021:30},
	file = {Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\3P26Z6TH\\Sun et al. - 2020 - Real Differences between OT and CRDT in Correctnes.pdf:application/pdf},
}

@inproceedings{preguica_commutative_2009,
	title = {A {Commutative} {Replicated} {Data} {Type} for {Cooperative} {Editing}},
	doi = {10.1109/ICDCS.2009.20},
	abstract = {A commutative replicated data type (CRDT) is one where all concurrent operations commute. The replicas of a CRDT converge automatically, without complex concurrency control. This paper describes Treedoc, a novel CRDT design for cooperative text editing. An essential property is that the identifiers of Treedoc atoms are selected from a dense space. We discuss practical alternatives for implementing the identifier space based on an extended binary tree. We also discuss storage alternatives for data and meta-data, and mechanisms for compacting the tree. In the best case, Treedoc incurs no overhead with respect to a linear text buffer. We validate the results with traces from existing edit histories.},
	booktitle = {2009 29th {IEEE} {International} {Conference} on {Distributed} {Computing} {Systems}},
	author = {Preguica, Nuno and Marques, Joan Manuel and Shapiro, Marc and Letia, Mihai},
	month = jun,
	year = {2009},
	note = {ISSN: 1063-6927},
	keywords = {Automatic control, Binary trees, co-operative editing, commutative replicated data type, Compaction, Concurrency control, Concurrent computing, Convergence, Delay, dense identifier space, distributed algorithms, Distributed computing, History, replicated data, Writing},
	pages = {395--403},
	file = {IEEE Xplore Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\SRH8TYN8\\Preguica et al. - 2009 - A Commutative Replicated Data Type for Cooperative.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\dedbo\\Zotero\\storage\\BN3MPTTT\\5158449.html:text/html},
}

@inproceedings{hall_causal_2018,
	address = {New York, NY, USA},
	series = {{DocEng} '18},
	title = {The {Causal} {Graph} {CRDT} for {Complex} {Document} {Structure}},
	isbn = {978-1-4503-5769-2},
	url = {https://doi.org/10.1145/3209280.3229110},
	doi = {10.1145/3209280.3229110},
	abstract = {Commutative Replicated Data Types (CRDTs) are an emerging tool for real-time collaborative editing. Existing work on CRDTs mostly focuses on documents as a list of text content, but large documents (having over 7,000 pages) with complex sectional structure need higher-level organization. We introduce the Causal Graph, which extends the Causal Tree CRDT into a graph of nodes and transitions to represent ordered trees. This data structure is useful in driving document outlines for large collaborative documents, resolving structures with over 100,000 sections in less than a second.},
	urldate = {2021-07-05},
	booktitle = {Proceedings of the {ACM} {Symposium} on {Document} {Engineering} 2018},
	publisher = {Association for Computing Machinery},
	author = {Hall, Aaron and Nelson, Grant and Thiesen, Mike and Woods, Nate},
	month = aug,
	year = {2018},
	pages = {1--4},
	file = {Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\UY7XXQVN\\Hall et al. - 2018 - The Causal Graph CRDT for Complex Document Structu.pdf:application/pdf},
}

@article{kleppmann_conflict-free_2017,
	title = {A {Conflict}-{Free} {Replicated} {JSON} {Datatype}},
	volume = {28},
	issn = {1558-2183},
	doi = {10.1109/TPDS.2017.2697382},
	abstract = {Many applications model their data in a general-purpose storage format such as JSON. This data structure is modified by the application as a result of user input. Such modifications are well understood if performed sequentially on a single copy of the data, but if the data is replicated and modified concurrently on multiple devices, it is unclear what the semantics should be. In this paper we present an algorithm and formal semantics for a JSON data structure that automatically resolves concurrent modifications such that no updates are lost, and such that all replicas converge towards the same state (a conflict-free replicated datatype or CRDT). It supports arbitrarily nested list and map types, which can be modified by insertion, deletion and assignment. The algorithm performs all merging client-side and does not depend on ordering guarantees from the network, making it suitable for deployment on mobile devices with poor network connectivity, in peer-to-peer networks, and in messaging systems with end-to-end encryption.},
	number = {10},
	journal = {IEEE Transactions on Parallel and Distributed Systems},
	author = {Kleppmann, Martin and Beresford, Alastair R.},
	month = oct,
	year = {2017},
	note = {Conference Name: IEEE Transactions on Parallel and Distributed Systems},
	keywords = {Collaboration, collaborative editing, CRDTs, Data models, Data structures, eventual consistency, JSON, Mobile handsets, operational semantics, optimistic replication, P2P, Registers, Semantics, Servers},
	pages = {2733--2746},
	file = {IEEE Xplore Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\BEZ8SDCQ\\Kleppmann and Beresford - 2017 - A Conflict-Free Replicated JSON Datatype.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\dedbo\\Zotero\\storage\\7FDJXCZF\\7909007.html:text/html},
}

@inproceedings{anderson_rdf_2019,
	address = {New York, NY, USA},
	series = {{WWW} '19},
	title = {{RDF} {Graph} {Stores} as {Convergent} {Datatypes}},
	isbn = {978-1-4503-6675-5},
	url = {https://doi.org/10.1145/3308560.3316517},
	doi = {10.1145/3308560.3316517},
	abstract = {This report describes a way to represent and operate on an RDF dataset such the it behaves as an instance of a conflict free replicable datatype. In this industry presentation, we describe how we accomplish this for the Dydra RDF graph storage service in a manner compatible with the SPARQL Graph Store HTTP Protocol (GSP). The standard GSP concerns the current store state only. Dydra retains previous store states as active addressable aspects analogous to named graphs in a quad store. It incorporates and addresses arbitrary revisions of target datasets according to ETag and Content-Disposition specifications in HTTP headers. Appropriate interpretation of these arguments permits to replicate datasets among cooperating participants.},
	urldate = {2021-07-05},
	booktitle = {Companion {Proceedings} of {The} 2019 {World} {Wide} {Web} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Anderson, James},
	month = may,
	year = {2019},
	keywords = {CvRDT, Graph Store Protocol, RDF, revisions, temporal data},
	pages = {940--942},
	file = {Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\844KU4HH\\Anderson - 2019 - RDF Graph Stores as Convergent Datatypes.pdf:application/pdf},
}

@article{shapiro_convergent_2011,
	title = {Convergent and {Commutative} {Replicated} {Data} {Types}},
	url = {https://hal.inria.fr/hal-00932833},
	abstract = {Eventual consistency aims to ensure that replicas of some mutable shared object converge without foreground synchronisation. Previous approaches to eventual consistency are ad-hoc and error-prone. We study a principled approach: to base the design of shared data types on some simple formal conditions that are sufficient to guarantee eventual consistency. We call these types Convergent or Commutative Replicated Data Types (CRDTs). This paper formalises asynchronous object replication, either state based or oper- ation based, and provides a sufficient condition appropriate for each case. It describes several useful CRDTs, including container data types supporting both add and remove operations with clean semantics, and more complex types such as graphs and monotonic DAGs. It discusses some properties needed to implement non-trivial CRDTs.},
	language = {en},
	number = {104},
	urldate = {2021-07-06},
	journal = {Bulletin- European Association for Theoretical Computer Science},
	author = {Shapiro, Marc and Preguiça, Nuno and Baquero, Carlos and Zawirski, Marek},
	month = jun,
	year = {2011},
	pages = {67},
	file = {Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\DNX6R3FQ\\Shapiro et al. - 2011 - Convergent and Commutative Replicated Data Types.pdf:application/pdf;Snapshot:C\:\\Users\\dedbo\\Zotero\\storage\\7RDVA3R5\\hal-00932833.html:text/html},
}

@article{lv_novel_2018,
	title = {A novel {CRDT}-based synchronization method for real-time collaborative {CAD} systems},
	volume = {38},
	issn = {14740346},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S147403461730486X},
	doi = {10.1016/j.aei.2018.08.008},
	abstract = {CRDT (Conﬂict-free Replicated Data Type) has been proposed as an alternative synchronization mechanism for collaborative text editing systems in recent years. However, CRDT-based synchronization methods for collaborative systems with sophisticated objects, such as collaborative CAD (Co-CAD) systems, are rarely investigated in previous literatures. How well CRDT-based synchronization methods for Co-CAD systems could perform remains unknown. This paper presents a novel CRDT-based synchronization method to maintain eventual consistency for the feature-based CAD model. Firstly, three operation relations are deﬁned as the dependencyconﬂict relation, the mutual exclusive relation and the compatible relation in context of the feature-based CAD systems. Secondly, a feature-based conﬂict detection mechanism is proposed to detect the three relations. Thirdly, a feature-based conﬂict resolution approach under the CRDT framework is presented to solve the conﬂicts. Fourthly, the time complexity and the space complexity are analyzed in theory. Finally, case studies of collaborative modeling procedures verify the correctness and feasibility of the proposed method.},
	language = {en},
	urldate = {2021-07-06},
	journal = {Advanced Engineering Informatics},
	author = {Lv, Xiao and He, Fazhi and Cheng, Yuan and Wu, Yiqi},
	month = oct,
	year = {2018},
	pages = {381--391},
	file = {Lv et al. - 2018 - A novel CRDT-based synchronization method for real.pdf:C\:\\Users\\dedbo\\Zotero\\storage\\LUGRCQQK\\Lv et al. - 2018 - A novel CRDT-based synchronization method for real.pdf:application/pdf},
}

@article{mcclurg_difftree_nodate,
	title = {{diffTree}: {Robust} {Collaborative} {Coding} using {Tree}-{Merge}},
	abstract = {Handheld devices and cloud-connected applications are now commonplace, and developers cooperate more than ever, taking advantage of distributed version control systems and online collaborative development environments.},
	language = {en},
	author = {McClurg, Jedidiah and Burckhardt, Sebastian and Moskal, Michał and Protzenko, Jonathan},
	pages = {19},
	file = {McClurg et al. - diffTree Robust Collaborative Coding using Tree-M.pdf:C\:\\Users\\dedbo\\Zotero\\storage\\RNK7Q74B\\McClurg et al. - diffTree Robust Collaborative Coding using Tree-M.pdf:application/pdf},
}

@inproceedings{sun_operational_1998,
	address = {New York, NY, USA},
	series = {{CSCW} '98},
	title = {Operational transformation in real-time group editors: issues, algorithms, and achievements},
	isbn = {978-1-58113-009-6},
	shorttitle = {Operational transformation in real-time group editors},
	url = {https://doi.org/10.1145/289444.289469},
	doi = {10.1145/289444.289469},
	urldate = {2021-07-05},
	booktitle = {Proceedings of the 1998 {ACM} conference on {Computer} supported cooperative work},
	publisher = {Association for Computing Machinery},
	author = {Sun, Chengzheng and Ellis, Clarence},
	month = nov,
	year = {1998},
	keywords = {causality preservation, consistency maintenance, convergence, distributed computing, group editors, groupware, intention preservation, operational transformation},
	pages = {59--68},
	file = {Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\2AS86CW6\\Sun and Ellis - 1998 - Operational transformation in real-time group edit.pdf:application/pdf},
}

@inproceedings{ellis_concurrency_1989,
	address = {New York, NY, USA},
	series = {{SIGMOD} '89},
	title = {Concurrency control in groupware systems},
	isbn = {978-0-89791-317-1},
	url = {https://doi.org/10.1145/67544.66963},
	doi = {10.1145/67544.66963},
	abstract = {Groupware systems are computer-based systems that support two or more users engaged in a common task, and that provide an interface to a shared environment. These systems frequently require fine-granularity sharing of data and fast response times. This paper distinguishes real-time groupware systems from other multi-user systems and discusses their concurrency control requirements. An algorithm for concurrency control in real-time groupware systems is then presented. The advantages of this algorithm are its simplicity of use and its responsiveness: users can operate directly on the data without obtaining locks. The algorithm must know some semantics of the operations. However the algorithm's overall structure is independent of the semantic information, allowing the algorithm to be adapted to many situations. An example application of the algorithm to group text editing is given, along with a sketch of its proof of correctness in this particular case. We note that the behavior desired in many of these systems is non-serializable.},
	urldate = {2021-07-05},
	booktitle = {Proceedings of the 1989 {ACM} {SIGMOD} international conference on {Management} of data},
	publisher = {Association for Computing Machinery},
	author = {Ellis, C. A. and Gibbs, S. J.},
	month = jun,
	year = {1989},
	pages = {399--407},
	file = {Full Text PDF:C\:\\Users\\dedbo\\Zotero\\storage\\Z49K7FW5\\Ellis and Gibbs - 1989 - Concurrency control in groupware systems.pdf:application/pdf},
}

@article{lamport_time_nodate,
	title = {Time, {Clocks}, and the {Ordering} of {Events} in a {Distributed} {System}},
	abstract = {The concept of one event happening before another in a distributed system is examined, and is shown to deﬁne a partial ordering of the events. A distributed algorithm is given for synchronizing a system of logical clocks which can be used to totally order the events. The use of the total ordering is illustrated with a method for solving synchronization problems. The algorithm is then specialized for synchronizing physical clocks, and a bound is derived on how far out of synchrony the clocks can become.},
	language = {en},
	author = {Lamport, Leslie},
	pages = {45},
	file = {Lamport - Time, Clocks, and the Ordering of Events in a Dist.pdf:C\:\\Users\\dedbo\\Zotero\\storage\\XHMQ6HZ3\\Lamport - Time, Clocks, and the Ordering of Events in a Dist.pdf:application/pdf},
}

@book{sole_visual_2018,
	title = {Visual {Studio} {Code} {Distilled}: {Evolved} {Code} {Editing} for {Windows}, {macOS}, and {Linux}},
	isbn = {978-1-4842-4224-7},
	shorttitle = {Visual {Studio} {Code} {Distilled}},
	abstract = {Use Visual Studio Code to write and debug code quickly and efficiently on any platform, for any device, using any programming language, and on the operating system of your choice. Visual Studio Code is an open source and cross-platform development tool that focuses on code editing across a variety of development scenarios, including web, mobile, and cloud development. Visual Studio Code Distilled teaches you how to be immediately productive with Visual Studio Code, from the basics to some of the more complex topics. You will learn how to work on individual code files, complete projects, and come away with an understanding of advanced code-editing features that will help you focus on productivity, and source code collaboration with Git.What You'll Learn Comprehend Visual Studio Code in a way that is not just theory or a list of features, but an approach driven by developer tasks and needsUnderstand integrated support for team collaboration with Git for executing and debugging code, and the many ways you can extend and customize VS CodeDebug code on multiple platforms though real-world guidance, such as working under corporate networksExpand your coding intelligence from web to mobile to the cloud, and even artificial intelligenceAcquire valuable tips, tricks, and suggestions from hard-earned, real-world experience to be more productiveWho This Book Is ForAll developers (including JavaScript, Java, NodeJS), not just those with a Microsoft background, who will benefit from learning and using VS code as a cross-platform and cross-language tool.},
	language = {en},
	publisher = {Apress},
	author = {Sole, Alessandro Del},
	month = nov,
	year = {2018},
	note = {Google-Books-ID: YqR8DwAAQBAJ},
	keywords = {Computers / Information Technology, Computers / Languages / General, Computers / Programming / General, Computers / Programming / Microsoft},
}

@misc{noauthor_design_2014,
	title = {Design {Responsive} {Websites} {In} {The} {Browser} {With} {Webflow}},
	url = {https://www.smashingmagazine.com/2014/08/designing-responsive-websites-browser-webflow/},
	abstract = {\_This article is the first part of a series of articles on emerging responsive design tools. Today, Richard Knight explores the advantages of Webflow and how you can use it today to build responsive websites — perhaps a bit faster than you would build them otherwise. – Ed.\_
New tools have emerged to address the challenges of responsive web design — tools such as \_Adobe Reflow\_ and the recently released \_Macaw\_. Today, we’ll look at one that I have tested extensively in the last few months. Though not perfect, it’s been a leap forward in productivity for the team that I work with. Its name is \_Webflow\_, and it could be the solution to the problems you face with static design comps produced in Photoshop and Fireworks.
This article will take you step by step through the process of creating a responsive website layout for a real project. As we go along, we’ll also identify Webflow’s advantages and where it comes up short.},
	language = {en},
	urldate = {2021-07-06},
	journal = {Smashing Magazine},
	month = aug,
	year = {2014},
	note = {Section: General},
	file = {Snapshot:C\:\\Users\\dedbo\\Zotero\\storage\\DB4J5EUT\\designing-responsive-websites-browser-webflow.html:text/html},
}
